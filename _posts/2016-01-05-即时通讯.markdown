---
layout:     post
title:      "基于Node.js的即时通讯工具（移动智能终端课设）"
subtitle:   "计科03班 20124980 林义凯"
date:       2015-01-05 09:00:00
author:     "externIE"
header-img: "img/post/2015-1-20-bg.jpg"
tags:
    - 论文
---
＃ 摘要：
这是一个WebApp，用户间可以进行及时通讯，并且可以群聊，有最近聊天记录，最近联系人，以及消息推送，消息提醒，由于是纯webapp并且采用angular.js作客户端架构，应用可以实现全平台覆盖（良好适配桌面和手机屏幕），无论是win，mac，ios，android还是linux，稍加修改还可以作为android或ios上目前比较流行的hybrid app。主要架构：服务为LeanCloud，客户端视图采用HTML5，B/S连接采用WebSocket协议，客户端基本架构Angular.js。

# 什么是Node.js:
Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行的数据密集型的实时应用。Node是一个Javascript运行环境(runtime)。实际上它是对Google V8引擎进行了封装。V8引 擎执行Javascript的速度非常快，性能非常好。Node对一些特殊用例进行了优化，提供了替代的API，使得V8在非浏览器环境下运行得更好。Node.
js使用Module模块去划分不同的功能，以简化应用的开发。Modules模块有点象C语言中的类库。每一个Node.js的类库都包含了十分丰富的各类函数，比如http模块就包含了和http功能相关的很多函数，可以帮助开发者很容易地对比如http,tcp/udp等进行操作，还可以很容易的创建http和tcp/udp的服务器。

# 什么是WebSocket协议以及为什么要用WebSocket：
在www服务器下我们常用的传输协议有http1.0和http1.1，那么我们的应用为什么要采用WebSocket而不是采用更主流支持更广的http协议呢？其实我们都知道http是一种无状态协议，所谓的无状态就是对事物处理没有记忆能力，并且http通常用于短连接，在不需要状态信息的短连接传输文件它的效率是很高的，但我们需要做的是一个即时通讯工具，需要的是不断的联系，显然http看起来并不是那么合适。那么http协议是不是就不能做到呢，其实也不是，我们照样可以用http来实现或者说模拟实时通讯，我们可以用http建立long poll就是长连接，客户端在没收到消息之前一直保持连接，在收到消息后，再次建立连接等待下一次消息的到来。另一种方法就是采用ajax技术不断的轮询服务器是否有消息等待客户端接收。显然听起来这两种方法都是非常糟糕的，当客户端一多，服务器每时每刻都会收到各种客户端的询问，资源消耗将是非常巨大的。如果我们有服务器主动转发消息的机制不是更好吗，所以我们需要采用WebSocket，因为它只需要客户端与服务器端进行一次握手建立连接就可以了，并且服务器能记住客户端的信息，不需要每次发送消息都要客户端将自己的状态再发给服务器，这么一说用WebSocket协议显然再合适不过了。但是WebSocket的支持并不像http那样广泛，所以再部署项目的时候我们也不能掉以轻心。

# 什么是Angular.js以及为什么要用Angular.js：
Angular.js是谷歌开发的一款Web应用开发框架。它提供了一系列兼容性良好并且可拓展的服务，包括数据绑定，DOM操作，MVC设计模式和模块加载等。它不仅仅是一个类库而是提供了一个完整的框架，避免了和多个类库交互，不再需要熟悉不同的接口，也许性能上比不上jQuery库开发的应用，但是其开发webApp应用的效率是jQuery库不能比的。所以我们在开发webApp的时候通常会选择较为简单的途径－Angular.js，在这个项目中我们还用到了Angular.js中三个不同的模块分别是：1.leancloud-realtime（leancloud SDK 的angular.js包装）；2.ui.router；3.ngMaterial（提供Material风格的UI组件）

# 什么是leancloud以及我们为什么要用leancloud：
leancloud是一套服务，提供免费和收费的后端服务，使开发者更专注于前端应用的设计，实现真正的零后端开发，开发者不用再关心数据和应用服务器，并且leancloud提供的云引擎可以将代码部署在云端执行，更加灵活的满足各种需求。在这个应用中我们的数据通讯以及数据存储推送等等服务都是由leancloud来承担，作为应用开发者我们真正做到只需要关心数据对象本身，而不用关心对象如何进行存储和获取，并且采用leancloud的js-realtime-sdk进行前端的开发。

# 系统分析及设计方案：
##按模块划分：
我们首先来分析实际发生一段对话需要有几个实体，首先对话需要人物，而且至少是两个和两个以上的人物，其次对话需要有对话内容，在一次对话的每段内容中不仅包括对话消息还有产生对话的时间以及发送人。所以我们如果设计一个即时通讯的应用，至少一定要有两个模块，一个是用户（用来管理用户信息），另一个就是对话（管理对话内容和参与者信息），那么对于一个实用的系统来说我们还需要一个模块用来管理用户和其他用户的对话缓存（很遗憾在这个系统中我们没有实现用户关系系统，我们没有为新用户提供注册ID并参与对话的能力，我们仅仅可以实现已有用户之间的对话通过后台创建不同的对话来实现不同用户或用户群间的简单交流）。
下面是我们的代码结构：
src
├── app
│   ├── components      // 组件
│   │   ├── conversation-cache    // 会话本地缓存 service
│   │   ├── message               // 消息 directive
│   │   ├── reverse-infinite-list // 向上滚动无限加载列表 directive
│   │   └── user                  // 用户相关 service
│   ├── conversation    // 会话 view，app 主界面
│   │   └── conversation-message  // 消息 view，会话 view 的子 view
│   ├── index.config.js // 配置依赖模块
│   ├── index.module.js // js 入口，注册依赖模块，启动 app
│   ├── index.route.js  // 配置路由
│   ├── index.run.js    // 启动 app 的代码
│   ├── index.scss
│   └── login           // 登录 view
├── assets
│   ├── fonts
│   └── images
├── favicon.ico
└── index.html  // 页面入口，ui-view 容器
## 按业务划分：
我们还是采用经典的MVC模式来设计我们的应用，视图方面我们采用html＋css的方式，每个视图有专有的控制器联系视图和后台的model。具体划分如下：

src
├── app
│   ├── login     // 登陆
│   │   ├── login.html+login.scss    // login界面
│   │   └── login.controller.js                 // login控制器
│   ├── conversation    // 会话 view，app 主界面
│   │   ├── conversation-message  // 消息 view，会话 view 的子 view
│   │   │ ├── conversation-message.html+  conversation-message.css
│   │   │ └── conversation-message.controller.js
│   │   ├── conversation.html+conversation.scss
│   │   └── conversation.js
└── index.html  // 页面入口，ui-view 容器

# 系统实现：
## index.module.js:
js 入口，申明依赖模块，配置依赖模块，注册 components 与 views，启动 app。
依赖的 angular 模块有：
- [leancloud-realtime](https://github.com/leeyeh/angular-leancloud-realtime)：leancloud realtime SDK 的 angular 包装
- [ui.router](https://github.com/angular-ui/ui-router)：基于状态的 router
- [ngMaterial](https://material.angularjs.org/)：提供 material design UI 组件

## index.route.js
配置 ui.router（提供了路由嵌套和视图命名的特性）

## index.config.js
配置其他依赖模块

## index.run.js
启动 app 的脚本，通过监听 ui.router 的 `stateChangeStart` 事件在视图切换时检查用户登录状态。

## Login
通过 UserService 的 login 方法，最终调用了 SDK 的  [`AV.realtime()`](https://leancloud.cn/docs/js_realtime.html#AV_realtime)，与实时通讯 server 建立长连接。然后跳转到 conversation 视图。

## Coversation
聊天主界面，包括了当前用户的对话列表以及子视图 `ConversationMessage`。
这个视图主要做了这些事情：

- 获取当前用户的所有会话，按照群聊单聊分类。
- 当新用户没有加入任何会话时，自动加入一个预设的群聊会话（defaultConversation）。
- 点击会话列表时让 `ConversationMessage` 视图转到对应的会话状态。
- 响应 rt 的 `message` 事件，维护会话的未读消息数。
- 响应 rt 的 `message` 事件、rt 的 `join` 事件，响应 `ConversationMessage` scope 的 `conv.messagesent` 事件，维护消息列表，将其按照最后消息时间排序。
- 点击 Logout 按钮时调用 UserService 的 login 方法进行注销。然后跳转到 Login 视图。

## CoversationMessage
聊天消息视图，`Coversation` 的子视图，由工具栏、消息列表、输入框以及在线用户列表侧边栏组成。其中暂态对话没有「在线用户列表」
」概念。
主要做了这些事情：
- 根据当前的路由信息，获取或创建一个会话。
- 获取该会话的历史消息记录，用户滚到顶部时加载更多历史消息。
- 响应该会话的 `message` 事件，在列表中显示消息内容。
- （可用的话）获取该会话的在线用户列表，提供本地的查询功能。
- 通知 `Conversation` 视图用以清除该会话的未读消息计数。
发送消息，通知 `Conversation` 视图用以调整会话列表排序。

## Message
Message directive 封装了消息的样式，需要传入四个属性：
- `message`：根据不同的消息类型展示不同的消息
- `previousMessage`：根据上一条消息与当前消息的时间戳决定是否显示消息时间
- `isMine`：标记是用户自己发送的消息
`onNameClick`：点击消息发送方 ID 的回调

## ReverseInfiniteList
封装了向上滚动到容器顶部时触发回调的 directive。

## User
提供用户登录、注销、获取用户登录状态、用户信息的 service。

## 区分单聊与群聊
LeanMessage 服务本身不区分单聊与群聊，demo 中在会话属性（`attr`）中增加了一个标识符 `customConversationType` 来标识这是一个单聊会话。

# 系统后台的搭建：
系统后台的搭建其实十分简单，由于该应用用的是leancloud的服务，我们只需要在我们的帐号里面创建一个应用，在应用－设置－安全中心－Web安全域名里面输入该应用所部属的域名，并且在应用－设置－应用key里面找到appId，在leancloud-runtime和服务器进行连接的时候我们需要绑定应用的appID。在应用的存储页面我们可以看到不同的class，可以认为是我们应用的数据库，存储了所有网络会话信息。

# 该系统存在的问题：
由于对leancloud后台服务了解的缺失，这个系统并没有一个比较全面的用户系统支持，应用中并不支持用户自由注册和添加删除好友关系，也不支持对话删除功能。同时使用angular.js框架的应用性能并不理想，目前该框架的应用较少，websocket协议的支持面也比较窄，有的服务器不能支持该协议。ngMaterial也是较新的一个angular.js模块，通过实践我们发现在手机UC浏览器上这个项目不能正常运行。如果要想在 Android WebView 中使用，需要注意开启 WebSocket 支持。另外，在部分 Android 机型的 WebView 中不支持 WebSocket 的安全链接，所以需要从 wss 协议转为 ws 协议，关闭 WebSocket 的 SSL。

# 项目现况：
http://externie.com/dist
请用账号test1登录（不需要输入邮箱地址）

# 参考文献：
1.百度百科websocket词条
2.nodejs官网 http://nodejs.org/
3.七步从Angular.js菜鸟到专家 http://developer.51cto.com/art/201308/408586.htm
4.Gulp as a Development Web Server http://code.tutsplus.com/tutorials/gulp-as-a-development-web-server--cms-20903
5.leancloud数据存储文档
6.leancloud实时通讯文档
7.leancloud javascript文档